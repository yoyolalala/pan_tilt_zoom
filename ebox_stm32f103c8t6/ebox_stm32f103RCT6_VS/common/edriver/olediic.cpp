#include "olediic.hpp"
const unsigned char F6x8[][6] =
{
	{ 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },   // sp
	{ 0x00, 0x00, 0x00, 0x2f, 0x00, 0x00 },   // !
	{ 0x00, 0x00, 0x07, 0x00, 0x07, 0x00 },   // "
	{ 0x00, 0x14, 0x7f, 0x14, 0x7f, 0x14 },   // #
	{ 0x00, 0x24, 0x2a, 0x7f, 0x2a, 0x12 },   // $
	{ 0x00, 0x62, 0x64, 0x08, 0x13, 0x23 },   // %
	{ 0x00, 0x36, 0x49, 0x55, 0x22, 0x50 },   // &
	{ 0x00, 0x00, 0x05, 0x03, 0x00, 0x00 },   // '
	{ 0x00, 0x00, 0x1c, 0x22, 0x41, 0x00 },   // (
	{ 0x00, 0x00, 0x41, 0x22, 0x1c, 0x00 },   // )
	{ 0x00, 0x14, 0x08, 0x3E, 0x08, 0x14 },   // *
	{ 0x00, 0x08, 0x08, 0x3E, 0x08, 0x08 },   // +
	{ 0x00, 0x00, 0x00, 0xA0, 0x60, 0x00 },   // ,
	{ 0x00, 0x08, 0x08, 0x08, 0x08, 0x08 },   // -
	{ 0x00, 0x00, 0x60, 0x60, 0x00, 0x00 },   // .
	{ 0x00, 0x20, 0x10, 0x08, 0x04, 0x02 },   // /
	{ 0x00, 0x3E, 0x51, 0x49, 0x45, 0x3E },   // 0
	{ 0x00, 0x00, 0x42, 0x7F, 0x40, 0x00 },   // 1
	{ 0x00, 0x42, 0x61, 0x51, 0x49, 0x46 },   // 2
	{ 0x00, 0x21, 0x41, 0x45, 0x4B, 0x31 },   // 3
	{ 0x00, 0x18, 0x14, 0x12, 0x7F, 0x10 },   // 4
	{ 0x00, 0x27, 0x45, 0x45, 0x45, 0x39 },   // 5
	{ 0x00, 0x3C, 0x4A, 0x49, 0x49, 0x30 },   // 6
	{ 0x00, 0x01, 0x71, 0x09, 0x05, 0x03 },   // 7
	{ 0x00, 0x36, 0x49, 0x49, 0x49, 0x36 },   // 8
	{ 0x00, 0x06, 0x49, 0x49, 0x29, 0x1E },   // 9
	{ 0x00, 0x00, 0x36, 0x36, 0x00, 0x00 },   // :
	{ 0x00, 0x00, 0x56, 0x36, 0x00, 0x00 },   // ;
	{ 0x00, 0x08, 0x14, 0x22, 0x41, 0x00 },   // <
	{ 0x00, 0x14, 0x14, 0x14, 0x14, 0x14 },   // =
	{ 0x00, 0x00, 0x41, 0x22, 0x14, 0x08 },   // >
	{ 0x00, 0x02, 0x01, 0x51, 0x09, 0x06 },   // ?
	{ 0x00, 0x32, 0x49, 0x59, 0x51, 0x3E },   // @
	{ 0x00, 0x7C, 0x12, 0x11, 0x12, 0x7C },   // A
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x36 },   // B
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x22 },   // C
	{ 0x00, 0x7F, 0x41, 0x41, 0x22, 0x1C },   // D
	{ 0x00, 0x7F, 0x49, 0x49, 0x49, 0x41 },   // E
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x01 },   // F
	{ 0x00, 0x3E, 0x41, 0x49, 0x49, 0x7A },   // G
	{ 0x00, 0x7F, 0x08, 0x08, 0x08, 0x7F },   // H
	{ 0x00, 0x00, 0x41, 0x7F, 0x41, 0x00 },   // I
	{ 0x00, 0x20, 0x40, 0x41, 0x3F, 0x01 },   // J
	{ 0x00, 0x7F, 0x08, 0x14, 0x22, 0x41 },   // K
	{ 0x00, 0x7F, 0x40, 0x40, 0x40, 0x40 },   // L
	{ 0x00, 0x7F, 0x02, 0x0C, 0x02, 0x7F },   // M
	{ 0x00, 0x7F, 0x04, 0x08, 0x10, 0x7F },   // N
	{ 0x00, 0x3E, 0x41, 0x41, 0x41, 0x3E },   // O
	{ 0x00, 0x7F, 0x09, 0x09, 0x09, 0x06 },   // P
	{ 0x00, 0x3E, 0x41, 0x51, 0x21, 0x5E },   // Q
	{ 0x00, 0x7F, 0x09, 0x19, 0x29, 0x46 },   // R
	{ 0x00, 0x46, 0x49, 0x49, 0x49, 0x31 },   // S
	{ 0x00, 0x01, 0x01, 0x7F, 0x01, 0x01 },   // T
	{ 0x00, 0x3F, 0x40, 0x40, 0x40, 0x3F },   // U
	{ 0x00, 0x1F, 0x20, 0x40, 0x20, 0x1F },   // V
	{ 0x00, 0x3F, 0x40, 0x38, 0x40, 0x3F },   // W
	{ 0x00, 0x63, 0x14, 0x08, 0x14, 0x63 },   // X
	{ 0x00, 0x07, 0x08, 0x70, 0x08, 0x07 },   // Y
	{ 0x00, 0x61, 0x51, 0x49, 0x45, 0x43 },   // Z
	{ 0x00, 0x00, 0x7F, 0x41, 0x41, 0x00 },   // [
	{ 0x00, 0x55, 0x2A, 0x55, 0x2A, 0x55 },   // 55
	{ 0x00, 0x00, 0x41, 0x41, 0x7F, 0x00 },   // ]
	{ 0x00, 0x04, 0x02, 0x01, 0x02, 0x04 },   // ^
	{ 0x00, 0x40, 0x40, 0x40, 0x40, 0x40 },   // _
	{ 0x00, 0x00, 0x01, 0x02, 0x04, 0x00 },   // '
	{ 0x00, 0x20, 0x54, 0x54, 0x54, 0x78 },   // a
	{ 0x00, 0x7F, 0x48, 0x44, 0x44, 0x38 },   // b
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x20 },   // c
	{ 0x00, 0x38, 0x44, 0x44, 0x48, 0x7F },   // d
	{ 0x00, 0x38, 0x54, 0x54, 0x54, 0x18 },   // e
	{ 0x00, 0x08, 0x7E, 0x09, 0x01, 0x02 },   // f
	{ 0x00, 0x18, 0xA4, 0xA4, 0xA4, 0x7C },   // g
	{ 0x00, 0x7F, 0x08, 0x04, 0x04, 0x78 },   // h
	{ 0x00, 0x00, 0x44, 0x7D, 0x40, 0x00 },   // i
	{ 0x00, 0x40, 0x80, 0x84, 0x7D, 0x00 },   // j
	{ 0x00, 0x7F, 0x10, 0x28, 0x44, 0x00 },   // k
	{ 0x00, 0x00, 0x41, 0x7F, 0x40, 0x00 },   // l
	{ 0x00, 0x7C, 0x04, 0x18, 0x04, 0x78 },   // m
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x78 },   // n
	{ 0x00, 0x38, 0x44, 0x44, 0x44, 0x38 },   // o
	{ 0x00, 0xFC, 0x24, 0x24, 0x24, 0x18 },   // p
	{ 0x00, 0x18, 0x24, 0x24, 0x18, 0xFC },   // q
	{ 0x00, 0x7C, 0x08, 0x04, 0x04, 0x08 },   // r
	{ 0x00, 0x48, 0x54, 0x54, 0x54, 0x20 },   // s
	{ 0x00, 0x04, 0x3F, 0x44, 0x40, 0x20 },   // t
	{ 0x00, 0x3C, 0x40, 0x40, 0x20, 0x7C },   // u
	{ 0x00, 0x1C, 0x20, 0x40, 0x20, 0x1C },   // v
	{ 0x00, 0x3C, 0x40, 0x30, 0x40, 0x3C },   // w
	{ 0x00, 0x44, 0x28, 0x10, 0x28, 0x44 },   // x
	{ 0x00, 0x1C, 0xA0, 0xA0, 0xA0, 0x7C },   // y
	{ 0x00, 0x44, 0x64, 0x54, 0x4C, 0x44 },   // z
	{ 0x14, 0x14, 0x14, 0x14, 0x14, 0x14 }    // horiz lines
};

unsigned char F16x16[] =
{
	0x08,0x08,0x08,0x38,0xC8,0x08,0x09,0x0E,0x08,0x08,0xC8,0x38,0x08,0x08,0x08,0x00,0x80,0x80,0x40,0x40,
	0x20,0x11,0x0A,0x04,0x0A,0x11,0x20,0x40,0x40,0x80,0x80,0x00,/*"?",0*/

	0x20,0x10,0x2C,0xE7,0x24,0x24,0x80,0x90,0x4C,0x57,0xA4,0x54,0x4C,0x84,0x80,0x00,0x01,0x01,0x01,0x7F,
	0x21,0x11,0x10,0x10,0x15,0x15,0xFF,0x15,0x15,0x10,0x10,0x00,/*"?",1*/

	0x00,0x80,0x60,0xF8,0x07,0x00,0x7C,0x44,0xEE,0x55,0x54,0xEC,0x44,0x7C,0x00,0x00,0x01,0x00,0x00,0xFF,
	0x00,0x84,0x92,0x49,0x56,0x24,0x24,0x54,0x4D,0x82,0x84,0x00,/*"?",2*/

	0x40,0x40,0x42,0xCC,0x00,0x82,0xBA,0xAA,0xAA,0xAA,0xAA,0xAA,0xBA,0x82,0x00,0x00,0x00,0x40,0x20,0x1F,
	0x20,0x5F,0x4A,0x4A,0x4A,0x4F,0x4A,0x4A,0x4A,0x5F,0x40,0x00,/*"?",3*/


}; 
void Oled::scl_1()
{
	SCL->mode(OUTPUT_PP);
	SCL->set();
}
void Oled::scl_0()
{
	SCL->mode(OUTPUT_PP);
	SCL->reset();
}
void Oled::sda_0()
{
	SDA->mode(OUTPUT_PP);
	SDA->reset();
}
void Oled::sda_1()
{
	SDA->mode(OUTPUT_PP);
	SDA->set();
}
void Oled::IIC_delay()
{
	uint8_t i;
	for (i = 0; i < 10; i++);
}
void Oled::IIC_Start()
{
	SCL_1;
	SDA_1;
	IIC_delay();
	SDA_0;
	IIC_delay();
	SCL_0;
	IIC_delay();
}
void Oled::IIC_Stop()
{
	SCL_0;
	SDA_0;
	SCL_1;
	IIC_delay();
	SDA_1;
}
void Oled::OLED_Init(void)
{

	//delay(500);//初始化前的延时很重要
	IIC_delay();

	OLED_WrCmd(0xae);//--turn off oled panel
	IIC_delay();
	OLED_WrCmd(0x00);//---set low column address
	IIC_delay();
	OLED_WrCmd(0x10);//---set high column address
	IIC_delay();
	OLED_WrCmd(0x40);//--set start line address  Set Mapping RAM Display Start Line (0x00~0x3F)
	IIC_delay();
	OLED_WrCmd(0x81);//--set contrast control register
	IIC_delay();
	OLED_WrCmd(Brightness); // Set SEG Output Current Brightness
	IIC_delay();
	OLED_WrCmd(0xa1);//--Set SEG/Column Mapping     0xa0×ó??・??? 0xa1????
	IIC_delay();
	OLED_WrCmd(0xc8);//Set COM/Row Scan Direction   0xc0????・??? 0xc8????
	IIC_delay();
	OLED_WrCmd(0xa6);//--set normal display
	IIC_delay();
	OLED_WrCmd(0xa8);//--set multiplex ratio(1 to 64)
	IIC_delay();
	OLED_WrCmd(0x3f);//--1/64 duty
	IIC_delay();
	OLED_WrCmd(0xd3);//-set display offset	Shift Mapping RAM Counter (0x00~0x3F)
	IIC_delay();
	OLED_WrCmd(0x00);//-not offset
	IIC_delay();
	OLED_WrCmd(0xd5);//--set display clock divide ratio/oscillator frequency
	IIC_delay();
	OLED_WrCmd(0x80);//--set divide ratio, Set Clock as 100 Frames/Sec
	IIC_delay();
	OLED_WrCmd(0xd9);//--set pre-charge period
	IIC_delay();
	OLED_WrCmd(0xf1);//Set Pre-Charge as 15 Clocks & Discharge as 1 Clock
	IIC_delay();
	OLED_WrCmd(0xda);//--set com pins hardware configuration
	IIC_delay();
	OLED_WrCmd(0x12);
	IIC_delay();
	OLED_WrCmd(0xdb);//--set vcomh
	IIC_delay();
	OLED_WrCmd(0x40);//Set VCOM Deselect Level
	IIC_delay();
	OLED_WrCmd(0x20);//-Set Page Addressing Mode (0x00/0x01/0x02)
	IIC_delay();
	OLED_WrCmd(0x02);//
	IIC_delay();
	OLED_WrCmd(0x8d);//--set Charge Pump enable/disable
	IIC_delay();
	OLED_WrCmd(0x14);//--set(0x10) disable
	IIC_delay();
	OLED_WrCmd(0xa4);// Disable Entire Display On (0xa4/0xa5)
	IIC_delay();
	OLED_WrCmd(0xa6);// Disable Inverse Display On (0xa6/a7) 
	IIC_delay();
	OLED_WrCmd(0xaf);//--turn on oled panel
	IIC_delay();
	OLED_Fill(0x00); //????????
	IIC_delay();
	OLED_Set_Pos(0, 0);
}
void Oled::Write_IIC_Byte(unsigned char IIC_Byte)
{
	unsigned char i;
	for (i = 0; i < 8; i++)
	{
		if (IIC_Byte & 0x80)
			SDA_1;
		else
			SDA_0;
		SCL_1;
		SCL_0;
		IIC_Byte <<= 1;
	}
	IIC_delay();
	SDA_1;
	IIC_delay();
	SCL_1;
	SCL_0;
}
void Oled::OLED_WrDat(unsigned char IIC_Data)
{
	IIC_Start();                                
	Write_IIC_Byte(OLED_ADDR);                  
	Write_IIC_Byte(0x40);	
	Write_IIC_Byte(IIC_Data);
	IIC_Stop();
}

void Oled::OLED_WrCmd(unsigned char IIC_Command)
{
	IIC_Start();
	Write_IIC_Byte(OLED_ADDR);            
	Write_IIC_Byte(0x00);			//write command
	Write_IIC_Byte(IIC_Command);
	IIC_Stop();
}
void Oled::OLED_Set_Pos(unsigned char x, unsigned char y)
{
	OLED_WrCmd(0xb0 + y); //设置page 范围b0-b7         
	OLED_WrCmd(((x & 0xf0) >> 4) | 0x10);  //set the upper column address


	OLED_WrCmd((x & 0x0f) | 0x01);//set the lower column address
}

void Oled::OLED_Fill(unsigned char bmp_dat)
{
	unsigned char y, x;
	for (y = 0; y < 8; y++)
	{
		OLED_WrCmd(0xb0 + y);
		OLED_WrCmd(0x01);
		OLED_WrCmd(0x10);
		for (x = 0; x < X_WIDTH; x++)
			OLED_WrDat(bmp_dat);
	}
}
void Oled::OLED_CLS(void)
{
	unsigned char y, x;
	for (y = 0; y < 8; y++)
	{
		OLED_WrCmd(0xb0 + y);
		OLED_WrCmd(0x01);
		OLED_WrCmd(0x10);
		for (x = 0; x < X_WIDTH; x++)
			OLED_WrDat(0);
	}
}
void Oled::disnum(unsigned int num, unsigned char x, unsigned char y)
{
	unsigned char number[] = { "     " };
	unsigned char i, j, c;
	number[4] = num % 10;
	number[3] = (num / 10) % 10;
	number[2] = (num / 100) % 10;
	number[1] = (num / 1000) % 10;
	number[0] = num / 10000;
	OLED_Set_Pos(x, y);
	for (j = 0; j < 5; j++)
	{
		c = number[j] + 16;
		for (i = 0; i < 6; i++)  OLED_WrDat(F6x8[c][i]);
	}
}
void Oled::OLED_P6x8Str(unsigned char x, unsigned char y, char ch[])
{
	unsigned char c = 0, i = 0, j = 0;
	while (ch[j] != '\0')
	{
		c = ch[j] - 32;
		if (x > 126) { x = 0; y++; }
		OLED_Set_Pos(x, y);
		for (i = 0; i < 6; i++)
			OLED_WrDat(F6x8[c][i]);
		x += 6;
		j++;
	}
}
static int lock = 0;
void Oled::disfloat_num(unsigned char x, unsigned char y, float num)
{

	if (lock != 1) {
		lock = 1;
		unsigned char number[] = { "     " };
		unsigned char i, j, c;
		uint32_t int_num;
		uint32_t decimal;
		int_num = (int)num;
		decimal = (num - int_num) * 1000;
		number[0] = int_num / 10;           
		number[1] = int_num % 10;         
		number[2] = '.';                 
		number[3] = decimal / 100;       
		number[4] = (decimal / 10) % 10;      
		number[5] = decimal % 10;          
		OLED_Set_Pos(x, y);
		for (j = 0; j < 6; j++)
		{
			c = number[j] + 16;
			for (i = 0; i < 6; i++)
			{
				if (j == 2)
				{
					OLED_WrDat(F6x8[14][i]); continue;
				}
				OLED_WrDat(F6x8[c][i]);
			}
		}
		lock = 0;
	}
}

void Oled::OLED_ShowCN(unsigned char x, unsigned char y, unsigned char N)
{
	unsigned char wm = 0;
	unsigned int  adder = 32 * N;
	OLED_Set_Pos(x, y);
	for (wm = 0; wm < 16; wm++)
	{
		OLED_WrDat(F16x16[adder]);
		adder += 1;
	}
	OLED_Set_Pos(x, y + 1);
	for (wm = 0; wm < 16; wm++)
	{
		OLED_WrDat(F16x16[adder]);
		adder += 1;
	}
}
void Oled::OLED_Show4CN(unsigned char x, unsigned char y)
{
	for (int i = 0; i < 4; i++)
	{
		OLED_ShowCN(x + i * 16 - 16, y, i);
	}
}

int Oled::OLED_printf(uint8_t x, uint8_t y, const char *fmt, ...)
{
	char printf_buf[64];
	va_list args;
	int printed;

	va_start(args, fmt);
	printed = vsprintf(printf_buf, fmt, args);
	va_end(args);
	OLED_P6x8Str(x, y, printf_buf);

	return printed;
}
void Oled::OLED_DrawBMP(unsigned char x0, unsigned char y0, unsigned char x1, unsigned char y1, unsigned char BMP[])
{
	unsigned int j = 0;
	unsigned char x, y;

	if (y1 % 8 == 0)
		y = y1 / 8;
	else
		y = y1 / 8 + 1;
	for (y = y0; y < y1; y++)
	{
		OLED_Set_Pos(x0, y);
		for (x = x0; x < x1; x++)
		{
			OLED_WrDat(BMP[j++]);
		}
	}
}